{"version":3,"sources":["img/Spotify_Logo_RGB_Green.png","App.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","authenticated","search","devices","currentDevice","playlist","playlistId","playlistName","playlistImageLink","allPlaylistSongs","selectedSongs","numRounds","isGameStarted","songsPlayed","score","roundTimer","currentAnswerOptions","onSubmit","bind","assertThisInitialized","reselectPlaylist","checkAnswer","nextSong","generateAnswerOptions","window","location","hash","queryString","substring","accessToken","URLSearchParams","get","spotifyClient","Spotify","setAccessToken","getMyDevices","setState","id","songId","play","device_id","uris","concat","pause","ev","preventDefault","searchPlaylists","market","searchResponse","playlists","items","name","images","url","playlistTracksLink","tracks","href","getPlaylistTracks","playlistResponse","total","alert","songs","selectRandomSongs","_this2","endGame","startPlayback","interval","setInterval","pausePlayback","clearInterval","shuffle","require","correctAnswer","shuffledArray","includes","push","array","num","i","item","Math","floor","random","length","track","is_playable","song","_this3","isCorrect","_this4","spotify_logo","react_default","a","createElement","className","src","alt","type","onChange","e","target","value","map","device","key","onClick","undefined","album","artists","artist","join","origin","pathname","React","Component","rootElement","document","getElementById","ReactDOM","render","App_App","src_App"],"mappings":"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","file":"static/js/main.ca96e5ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spotify_Logo_RGB_Green.11dc437a.png\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Spotify from \"spotify-web-api-js\";\n\nimport \"./style.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authenticated: false,\n\n      search: \"\",\n\n      devices: [],\n      currentDevice: \"\",\n\n      playlist: null,\n      playlistId: \"\",\n      playlistName: \"\",\n      playlistImageLink: \"\",\n      allPlaylistSongs: [],\n      selectedSongs: [],\n      numRounds: 10, // number of rounds per game\n\n      isGameStarted: false,\n      songsPlayed: 0,\n      score: 0,\n      roundTimer: 0,\n      currentAnswerOptions: []\n    };\n\n    this.onSubmit = this.onSubmit.bind(this);\n    this.reselectPlaylist = this.reselectPlaylist.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n    this.nextSong = this.nextSong.bind(this);\n    this.generateAnswerOptions = this.generateAnswerOptions.bind(this);\n  }\n\n  async componentDidMount() {\n    if (window.location.hash) {\n      const queryString = window.location.hash.substring(1);\n      const accessToken = new URLSearchParams(queryString).get(\"access_token\");\n      this.spotifyClient = new Spotify();\n      this.spotifyClient.setAccessToken(accessToken);\n\n      const {devices} = await this.spotifyClient.getMyDevices();\n      this.setState({\n        authenticated: true,\n        devices,\n        currentDevice: devices[0].id\n      });\n    }\n  }\n\n  async startPlayback(songId) {\n    await this.spotifyClient.play({\n      device_id: this.state.currentDevice,\n      uris: [`spotify:track:${songId}`]\n    });\n  }\n\n  async pausePlayback(songId) {\n    await this.spotifyClient.pause({\n      device_id: this.state.currentDevice,\n      uris: [`spotify:track:${songId}`]\n    });\n  }\n\n  async onSubmit(ev) {\n    ev.preventDefault();\n    const searchResponse = await this.spotifyClient.searchPlaylists(this.state.search, {\n      market: \"us\"\n    });\n\n    this.setState({\n      playlist: searchResponse.playlists.items[0],\n      playlistId: searchResponse.playlists.items[0].id,\n      playlistName: searchResponse.playlists.items[0].name,\n      playlistImageLink: searchResponse.playlists.items[0].images[0].url,\n      playlistTracksLink: searchResponse.playlists.items[0].tracks.href\n    });\n\n    const playlistResponse = await this.spotifyClient.getPlaylistTracks(this.state.playlistId, {\n      market: \"us\"\n    });\n\n    if (playlistResponse.total < 30) {\n      this.reselectPlaylist();\n      alert(\"Not enough tracks to play (<30). Please select other playlist.\");\n    }\n\n    let songs = this.selectRandomSongs(playlistResponse.items, this.state.numRounds);\n\n    this.setState({\n      allPlaylistSongs: playlistResponse.items,\n      selectedSongs: songs\n    });\n  }\n\n  reselectPlaylist() {\n    this.setState({\n      playlist: null,\n      playlistId: \"\",\n      playlistName: \"\",\n      playlistImageLink: \"\",\n      playlistTracksLink: \"\",\n\n      isGameStarted: false,\n      songsPlayed: 0,\n      score: 0,\n      roundTimer: 0\n    });\n  }\n\n  nextSong() {\n    if (this.state.songsPlayed >= this.state.numRounds) {\n      this.endGame();\n      return;\n    }\n    this.setState({\n      isGameStarted: true,\n    });\n\n    this.setState({isGameStarted: true}, () => {\n      this.generateAnswerOptions();\n    });\n\n    this.startPlayback(this.state.selectedSongs[this.state.songsPlayed].id);\n\n    this.interval = setInterval(() => {\n      if (this.state.roundTimer > 9) {\n        this.setState({\n          roundTimer: 0\n        });\n        this.pausePlayback(this.state.selectedSongs[this.state.songsPlayed].id);\n        clearInterval(this.interval);\n      } else {\n        this.setState({\n          roundTimer: this.state.roundTimer + 1\n        });\n      }\n    }, 1000);\n  }\n\n  generateAnswerOptions() {\n    let shuffle = require('shuffle-array');\n\n    let correctAnswer = this.state.selectedSongs[this.state.songsPlayed];\n    let shuffledArray = this.selectRandomSongs(this.state.allPlaylistSongs, 3);\n\n    while (shuffledArray.includes(correctAnswer)) {\n      shuffledArray = this.selectRandomSongs(this.state.allPlaylistSongs, 3);\n    }\n\n    shuffledArray.push(correctAnswer);\n    shuffle(shuffledArray);\n\n    this.setState({\n      currentAnswerOptions: shuffledArray\n    });\n  }\n\n  endGame() {\n    this.pausePlayback();\n    this.setState({\n      isGameStarted: false\n    });\n  }\n\n  selectRandomSongs(array, num) {\n    let songs = [];\n    for (let i = 0; i < num; i++) {\n      let item = array[Math.floor(Math.random() * array.length)].track;\n      if (!songs.includes(item) && item.is_playable) {\n        songs.push(item);\n      } else {\n        i--;\n      }\n    }\n\n    return songs;\n  }\n\n  checkAnswer(song) {\n    let isCorrect = false;\n    clearInterval(this.interval);\n    if (song.id === this.state.selectedSongs[this.state.songsPlayed].id) {\n      isCorrect = true;\n    }\n    if (isCorrect) {\n      this.setState({\n          score: this.state.score + 1,\n          songsPlayed: this.state.songsPlayed + 1,\n          roundTimer: 0\n        },\n        () => {\n          this.nextSong();\n        });\n    } else {\n      this.setState({\n          songsPlayed: this.state.songsPlayed + 1,\n          roundTimer: 0\n        },\n        () => {\n          this.nextSong();\n        });\n    }\n  }\n\n  render() {\n    const spotify_logo = require('./img/Spotify_Logo_RGB_Green.png')\n\n    if (!this.state.authenticated) {\n      return (\n        <div className=\"ui container centered login-page\">\n          <div className=\"logo-wrapper\">\n            <img className=\"spotify-logo\" src={spotify_logo} alt=\"\"/>\n          </div>\n          <a className=\"login-link\"\n             href={`https://accounts.spotify.com/authorize/?client_id=ac9ec319b658424d8aa1e41317e7c70f&response_type=token&redirect_uri=${window\n               .location.origin + window.location.pathname}&scope=streaming user-read-playback-state user-modify-playback-state user-top-read user-read-private`}>\n            Login to Spotify\n          </a>\n        </div>\n      );\n    }\n    return (\n      <div className=\"ui container\">\n\n        <div className=\"logo-wrapper\">\n          <img className=\"spotify-logo\" src={spotify_logo} alt=\"\"/>\n        </div>\n\n        {this.state.playlistName === \"\" &&\n        <div className=\"ui container search-form\">\n          <form className=\"ui form\" onSubmit={this.onSubmit}>\n            <input\n              className=\"search-input\"\n              type=\"text\"\n              onChange={e => this.setState({search: e.target.value})}\n            />\n            <input className=\"search-button\" type=\"submit\" value=\"Search Playlist\"/>\n          </form>\n          <select\n            className=\"ui dropdown\"\n            onChange={e => this.setState({currentDevice: e.target.value})}\n          >\n            {this.state.devices.map(device => (\n              <option key={device.id} value={device.id}>{device.name}</option>\n            ))}\n          </select>\n        </div>\n        }\n\n        {/*Separate component for playlist display with props (image link and name)?*/}\n        {this.state.playlistName !== \"\" &&\n        <div className=\"ui container selected-playlist\">\n          <p>Selected Playlist: {this.state.playlistName}</p>\n          <img className=\"playlist-image\" src={this.state.playlistImageLink} alt=\"\"/>\n          <div className=\"playlist-buttons\">\n            <button className=\"reselect-playlist\" onClick={this.reselectPlaylist}>Reselect Playlist</button>\n            {!this.state.isGameStarted && this.state.songsPlayed === 0 &&\n            <button className=\"start-game\" onClick={this.nextSong}>Start Game</button>\n            }\n            {this.state.isGameStarted &&\n            <p className=\"timer\">Timer: {10 - this.state.roundTimer}</p>\n            }\n          </div>\n        </div>\n        }\n\n        {this.state.playlistName !== \"\" && this.state.isGameStarted &&\n        <div className=\"ui container answer-options\">\n          <p className=\"guess-header\">Guess the song!</p>\n\n          {this.state.currentAnswerOptions.map(song => (\n            <div className=\"ui answer-item\" key={song.id} onClick={() => this.checkAnswer(song)}>\n              <div className=\"ui container\">\n                {\n                  song.album.images[0] !== undefined &&\n                  <img className=\"song-image\" src={song.album.images[0].url} alt=\"\"/>\n                }\n              </div>\n              <div className=\"content song-info\">\n                <p className=\"song-artists\">\n                  {song.artists.map(artist => artist.name).join(\", \")}\n                </p>\n                <p className=\"song-name\">\n                  {song.name}\n                </p>\n              </div>\n            </div>\n          ))}\n\n          <p className=\"round-score\">Round: {this.state.songsPlayed + 1} | Score: {this.state.score}</p>\n        </div>\n        }\n\n        {!this.state.isGameStarted && this.state.songsPlayed > 0 &&\n        <div className=\"ui container game-stats\">\n          <p className=\"game-over-header\">The game is over!</p>\n          <p className=\"game-over-score\">Your final score is: {this.state.score} out of {this.state.songsPlayed}.</p>\n        </div>\n        }\n\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App/>, rootElement);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}